// /api/create-chat
import { db } from "@/lib/db";
import { chats, messages as _messages } from '@/lib/db/schema';
import { auth } from "@clerk/nextjs";
import { NextResponse } from "next/server";
import { get } from 'http';
import { getOpenAiApi } from '@/lib/openai';
import { eq } from "drizzle-orm";

const openai = getOpenAiApi();

export async function POST(req: Request, res: Response) {
    try {

        const {userId} = await auth();
        if (userId === null) {
            return NextResponse.json({error: "unauthorized"}, {status: 401});
        }

        const {firstQuestion, chatId} = await req.json();
        if (!chatId || !firstQuestion) {
            return NextResponse.json({'error': 'messages or chatId not provided'}, {status: 400})
        }

        const _chats = await db.select().from(chats).where(eq(chats.id, chatId));
        console.log(_chats);
        // check if chat exists and if title is already set
        if (_chats.length === 0 || _chats[0].title !== '') {
            return NextResponse.json({error: "chat not found or title already set"}, {status: 400});
        }

        console.log(firstQuestion);
        // before creating a new chat, let a title be generated by ai from the first message
        const completion = await openai.createChatCompletion({
            model: 'gpt-3.5-turbo',
            messages: [{"role": "system", "content": "You are a helpful assistant who is specialized in creating chat titles which are not longer then 40 characters."},
            {"role": "user", "content": firstQuestion}],
            temperature: 0.7,
        });


        const {choices} = await completion.json();
        // remove "" from title
        const title = choices[0].message.content.replace(/"/g, "");
        await db
        .update(chats)
        .set({
            title: title.substring(0, 255),
        }).where(eq(chats.id, chatId));
        // return the title to the client
        return NextResponse.json({title}, {status: 200});
    } catch (error) {
        console.log(error);
        return NextResponse.json(
            { error: "Something went wrong" },
            { status: 500 }
        )
    }
}